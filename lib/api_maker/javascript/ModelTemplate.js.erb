import BaseModel from "./BaseModel"
import Collection from "./Collection"

export default class extends BaseModel {
  static modelClassData() {
    return <%= {name: model.model_name.name, paramKey: model.model_name.param_key, path: "/api_maker/#{model.model_name.route_key}"}.to_json %>
  }

  <% reflections.each do |reflection| %>
    <% if reflection.is_a?(ActiveRecord::Reflection::BelongsToReflection) %>
      <%= js_attribute_name(reflection.name) %>() {
        return this.readBelongsToReflection(<%= {name: reflection.name}.to_json %>)
      }
    <% elsif reflection.is_a?(ActiveRecord::Reflection::HasManyReflection) %>
      <%= js_attribute_name(reflection.name) %>() {
        var id = this.<%= reflection.active_record.primary_key %>()
        return new Collection(<%= api_maker_json("modelName" => reflection.class_name, "targetPathName" => "/api_maker/#{reflection.klass.model_name.route_key}", "ransack" => {"#{reflection.foreign_key}_eq" => "{{id}}"}) %>)
      }
    <% elsif reflection.is_a?(ActiveRecord::Reflection::HasOneReflection) %>
      <%= js_attribute_name(reflection.name) %>() {
        return this.readHasOneReflection(<%= {name: reflection.name}.to_json %>)
      }
    <% end %>
  <% end %>

  <% attribute_names.each do |attribute_name| %>
    <%= js_attribute_name(attribute_name) %>() {
      return this.getAttribute("<%= attribute_name %>")
    }
  <% end %>
}

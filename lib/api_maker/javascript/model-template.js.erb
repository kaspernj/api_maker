import BaseModel from "../base-model"
import Collection from "../collection"

export default class <%= model.name.gsub("::", "") %> extends BaseModel {
  static modelClassData() {
    return <%= {
      attributes: attributes,
      i18nKey: model.model_name.i18n_key,
      name: resource.short_name,
      pluralName: model.model_name.plural,
      relationships: reflections_for_model_class_data,
      paramKey: model.model_name.param_key,
      path: "/api_maker/#{model.model_name.route_key}",
      primaryKey: model.primary_key
    }.to_json %>
  }

  <% reflections.each do |reflection| %>
    <% if reflection.macro == :belongs_to %>
      <%= ApiMaker::JsMethodNamerService.execute!(name: "load_#{reflection.name}").result %>() {
        let id = this.<%= ApiMaker::JsMethodNamerService.execute!(name: reflection.foreign_key).result %>()
        let modelClass = require(`api-maker/models/<%= reflection.class_name.underscore.dasherize %>`).default
        return this._loadBelongsToReflection(<%= api_maker_json("reflectionName" => reflection.name, "model" => "{{this}}", "modelClass" => "{{modelClass}}", "ransack" => {"#{reflection.options[:primary_key] || reflection.klass.primary_key}_eq" => "{{id}}"}) %>)
      }

      <%= ApiMaker::JsMethodNamerService.execute!(name: reflection.name).result %>() {
        let id = this.<%= ApiMaker::JsMethodNamerService.execute!(name: reflection.foreign_key).result %>()
        let modelClass = require(`api-maker/models/<%= reflection.class_name.underscore.dasherize %>`).default
        return this._readBelongsToReflection(<%= api_maker_json("reflectionName" => reflection.name, "model" => "{{this}}", "modelClass" => "{{modelClass}}") %>)
      }
    <% elsif reflection.macro == :has_many %>
      <%= ApiMaker::JsMethodNamerService.execute!(name: reflection.name).result %>() {
        let id = this.<%= ApiMaker::JsMethodNamerService.execute!(name: reflection.options[:primary_key] || reflection.active_record.primary_key).result %>()
        let modelClass = require(`api-maker/models/<%= reflection.class_name.underscore.dasherize %>`).default
        return new Collection(<%= api_maker_json(reflection_has_many_parameters(reflection)) %>)
      }
    <% elsif reflection.macro == :has_one %>
      <%= ApiMaker::JsMethodNamerService.execute!(name: "load_#{reflection.name}").result %>() {
        let id = this.<%= reflection.active_record.primary_key %>()
        let modelClass = require(`api-maker/models/<%= reflection.class_name.underscore.dasherize %>`).default
        return this._loadHasOneReflection(<%= api_maker_json("reflectionName" => reflection.name, "model" => "{{this}}", "modelClass" => "{{modelClass}}", "ransack" => {"#{reflection.foreign_key}_eq" => "{{id}}"}) %>)
      }

      <%= ApiMaker::JsMethodNamerService.execute!(name: reflection.name).result %>() {
        let id = this.<%= reflection.active_record.primary_key %>()
        let modelClass = require(`api-maker/models/<%= reflection.class_name.underscore.dasherize %>`).default
        return this._readHasOneReflection(<%= api_maker_json("reflectionName" => reflection.name, "model" => "{{this}}", "modelClass" => "{{modelClass}}", "ransack" => {"#{reflection.foreign_key}_eq" => "{{id}}"}) %>)
      }
    <% end %>
  <% end %>

  <% attributes.each do |attribute_data| %>
    <% methodName = ApiMaker::JsMethodNamerService.execute!(name: attribute_data.fetch(:name)).result %>
    <%= methodName %>() {
      // <%= attribute_data.fetch(:type) %>
      <% if attribute_data.fetch(:type) == :datetime %>
        return this._getAttributeDateTime("<%= attribute_data.fetch(:name) %>")
      <% elsif attribute_data.fetch(:type) == :money %>
        return this._getAttributeMoney("<%= attribute_data.fetch(:name) %>")
      <% else %>
        return this._getAttribute("<%= attribute_data.fetch(:name) %>")
      <% end %>
    }

    <%= ApiMaker::JsMethodNamerService.execute!(name: "has_#{attribute_data.fetch(:name)}").result %>() {
      let value = this.<%= methodName %>()
      return this._isPresent(value)
    }
  <% end %>

  <% collection_commands.each do |collection_command, data| %>
    static <%= ApiMaker::JsMethodNamerService.execute!(name: collection_command).result %>(args) {
      return this._callcollectionCommand({
        args: args,
        collectionCommand: "<%= collection_command %>",
        modelClass: this
      })
    }
  <% end %>

  <% member_commands.each do |member_command, data| %>
    <%= ApiMaker::JsMethodNamerService.execute!(name: member_command).result %>(args) {
      return this._callmemberCommand({
        args: args,
        memberCommand: "<%= member_command %>",
        model: this
      })
    }
  <% end %>
}
